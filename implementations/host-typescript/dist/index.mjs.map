{"version":3,"sources":["../src/conduit.ts","../src/constants.ts","../src/interop.ts"],"names":["instance"],"mappings":";AAEA,SAAS,OAAA,CAAQ,GAAW,KAAsB,EAAA;AAChD,EAAA,MAAM,OAAO,KAAQ,GAAA,CAAA;AAErB,EAAQ,OAAA,CAAA,GAAI,OAAQ,CAAC,IAAA;AACvB;AAEA,IAAM,UAAN,MAAc;AAAA,EAQZ,YAAY,MAAqB,EAAA,MAAA,GAAS,CAAG,EAAA,WAAA,GAAc,OAAO,UAAY,EAAA;AAP9E,IAAA,IAAA,CAAQ,MAAS,GAAA,CAAA;AAQf,IAAA,IAAA,CAAK,eAAe,IAAI,UAAA,CAAW,QAAQ,MAAQ,EAAA,WAAA,GAAc,WAAW,iBAAiB,CAAA;AAC7F,IAAA,IAAA,CAAK,gBAAgB,IAAI,WAAA,CAAY,QAAQ,MAAQ,EAAA,WAAA,GAAc,YAAY,iBAAiB,CAAA;AAChG,IAAA,IAAA,CAAK,eAAe,IAAI,UAAA,CAAW,QAAQ,MAAQ,EAAA,WAAA,GAAc,WAAW,iBAAiB,CAAA;AAC7F,IAAA,IAAA,CAAK,iBAAiB,IAAI,YAAA,CAAa,QAAQ,MAAQ,EAAA,WAAA,GAAc,aAAa,iBAAiB,CAAA;AACnG,IAAA,IAAA,CAAK,iBAAiB,IAAI,YAAA,CAAa,QAAQ,MAAQ,EAAA,WAAA,GAAc,aAAa,iBAAiB,CAAA;AAAA;AACrG,EAEA,KAAc,GAAA;AACZ,IAAA,IAAA,CAAK,MAAS,GAAA,CAAA;AAAA;AAChB,EAEA,OAAkB,GAAA;AAChB,IAAA,OAAO,IAAK,CAAA,MAAA;AAAA;AACd,EAEA,QAAmB,GAAA;AAEjB,IAAA,IAAA,CAAK,MAAS,GAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,EAAQ,CAAC,CAAA;AAGpC,IAAA,OAAO,KAAK,MAAW,KAAA,CAAA;AAAA;AACzB,EAEA,QAAmB,GAAA;AAEjB,IAAA,IAAA,CAAK,MAAS,GAAA,OAAA,CAAQ,IAAK,CAAA,MAAA,EAAQ,CAAC,CAAA;AAGpC,IAAA,OAAO,KAAK,MAAW,KAAA,CAAA;AAAA;AACzB,EAEA,SAAS,KAAqB,EAAA;AAC5B,IAAA,IAAA,CAAK,MAAU,IAAA,KAAA;AAEf,IAAA,IAAI,IAAK,CAAA,MAAA,GAAS,IAAK,CAAA,YAAA,CAAa,MAAQ,EAAA;AAC1C,MAAA,MAAM,MAAM,wBAAwB,CAAA;AAAA;AACtC;AACF,EAEA,UAAU,KAAqB,EAAA;AAC7B,IAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,CAAC,CAAA;AAAA;AACzB,EAEA,UAAU,KAAqB,EAAA;AAC7B,IAAK,IAAA,CAAA,QAAA,CAAS,QAAQ,CAAC,CAAA;AAAA;AAE3B,CAAA;AAEO,IAAM,MAAA,GAAN,cAAqB,OAAQ,CAAA;AAAA,EAClC,WAAW,KAAqB,EAAA;AAC9B,IAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,OAAQ,EAAC,CAAI,GAAA,KAAA;AACpC,IAAA,IAAA,CAAK,SAAS,CAAC,CAAA;AAAA;AACjB,EAEA,YAAY,KAAqB,EAAA;AAC/B,IAAA,IAAA,CAAK,aAAc,CAAA,IAAA,CAAK,QAAS,EAAC,CAAI,GAAA,KAAA;AACtC,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAAA;AAClB,EAEA,WAAW,KAAqB,EAAA;AAC9B,IAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,QAAS,EAAC,CAAI,GAAA,KAAA;AACrC,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAAA;AAClB,EAEA,aAAa,KAAqB,EAAA;AAChC,IAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,QAAS,EAAC,CAAI,GAAA,KAAA;AACvC,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAAA;AAClB,EAEA,aAAa,KAAqB,EAAA;AAChC,IAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,QAAS,EAAC,CAAI,GAAA,KAAA;AACvC,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAAA;AAClB,EAEA,aAAyC,GAAA;AACvC,IAAM,MAAA,MAAA,GAAS,KAAK,OAAQ,EAAA;AAE5B,IAAA,IAAA,CAAK,SAAS,CAAC,CAAA;AAEf,IAAA,OAAO,CAAS,KAAA,KAAA;AACd,MAAK,IAAA,CAAA,YAAA,CAAa,MAAM,CAAI,GAAA,KAAA;AAAA,KAC9B;AAAA;AACF,EAEA,cAA0C,GAAA;AACxC,IAAM,MAAA,MAAA,GAAS,KAAK,QAAS,EAAA;AAE7B,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAA,OAAO,CAAS,KAAA,KAAA;AACd,MAAK,IAAA,CAAA,aAAA,CAAc,MAAM,CAAI,GAAA,KAAA;AAAA,KAC/B;AAAA;AACF,EAEA,aAAyC,GAAA;AACvC,IAAM,MAAA,MAAA,GAAS,KAAK,QAAS,EAAA;AAE7B,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAA,OAAO,CAAS,KAAA,KAAA;AACd,MAAK,IAAA,CAAA,YAAA,CAAa,MAAM,CAAI,GAAA,KAAA;AAAA,KAC9B;AAAA;AACF,EAEA,eAA2C,GAAA;AACzC,IAAM,MAAA,MAAA,GAAS,KAAK,QAAS,EAAA;AAE7B,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAA,OAAO,CAAS,KAAA,KAAA;AACd,MAAK,IAAA,CAAA,cAAA,CAAe,MAAM,CAAI,GAAA,KAAA;AAAA,KAChC;AAAA;AACF,EAEA,eAA2C,GAAA;AACzC,IAAM,MAAA,MAAA,GAAS,KAAK,QAAS,EAAA;AAE7B,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAA,OAAO,CAAS,KAAA,KAAA;AACd,MAAK,IAAA,CAAA,cAAA,CAAe,MAAM,CAAI,GAAA,KAAA;AAAA,KAChC;AAAA;AACF,EAEA,sBAAsB,MAA4B,EAAA;AAChD,IAAM,MAAA,KAAA,GAAQ,KAAK,OAAQ,EAAA;AAE3B,IAAA,IAAA,CAAK,SAAS,MAAM,CAAA;AAEpB,IAAA,OAAO,IAAK,CAAA,YAAA,CAAa,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAAA;AACzD,EAEA,mBAAmB,MAA4B,EAAA;AAC7C,IAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AACvB,IAAO,OAAA,IAAA,CAAK,sBAAsB,MAAM,CAAA;AAAA;AAC1C,EAEA,uBAAuB,MAA6B,EAAA;AAClD,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAE5B,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAA,OAAO,IAAK,CAAA,aAAA,CAAc,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAAA;AAC1D,EAEA,oBAAoB,MAA6B,EAAA;AAC/C,IAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AACvB,IAAO,OAAA,IAAA,CAAK,uBAAuB,MAAM,CAAA;AAAA;AAC3C,EAEA,sBAAsB,MAA4B,EAAA;AAChD,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAE5B,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAA,OAAO,IAAK,CAAA,YAAA,CAAa,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAAA;AACzD,EAEA,mBAAmB,MAA4B,EAAA;AAC7C,IAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AACvB,IAAO,OAAA,IAAA,CAAK,sBAAsB,MAAM,CAAA;AAAA;AAC1C,EAEA,wBAAwB,MAA8B,EAAA;AACpD,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAE5B,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAA,OAAO,IAAK,CAAA,cAAA,CAAe,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAAA;AAC3D,EAEA,qBAAqB,MAA8B,EAAA;AACjD,IAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AACvB,IAAO,OAAA,IAAA,CAAK,wBAAwB,MAAM,CAAA;AAAA;AAC5C,EAEA,wBAAwB,MAA8B,EAAA;AACpD,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAE5B,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAA,OAAO,IAAK,CAAA,cAAA,CAAe,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAAA;AAC3D,EAEA,qBAAqB,MAA8B,EAAA;AACjD,IAAA,IAAA,CAAK,YAAY,MAAM,CAAA;AACvB,IAAO,OAAA,IAAA,CAAK,wBAAwB,MAAM,CAAA;AAAA;AAC5C,EAEA,kBAAkB,GAAkC,EAAA;AAClD,IAAA,IAAA,CAAK,YAAa,CAAA,GAAA,CAAI,GAAK,EAAA,IAAA,CAAK,SAAS,CAAA;AACzC,IAAK,IAAA,CAAA,QAAA,CAAS,IAAI,MAAM,CAAA;AAAA;AAC1B,EAEA,mBAAmB,GAAmC,EAAA;AACpD,IAAA,IAAA,CAAK,aAAc,CAAA,GAAA,CAAI,GAAK,EAAA,IAAA,CAAK,UAAU,CAAA;AAC3C,IAAK,IAAA,CAAA,SAAA,CAAU,IAAI,MAAM,CAAA;AAAA;AAC3B,EAEA,kBAAkB,GAAkC,EAAA;AAClD,IAAA,IAAA,CAAK,YAAa,CAAA,GAAA,CAAI,GAAK,EAAA,IAAA,CAAK,UAAU,CAAA;AAC1C,IAAK,IAAA,CAAA,SAAA,CAAU,IAAI,MAAM,CAAA;AAAA;AAC3B,EAEA,oBAAoB,GAAoC,EAAA;AACtD,IAAA,IAAA,CAAK,cAAe,CAAA,GAAA,CAAI,GAAK,EAAA,IAAA,CAAK,UAAU,CAAA;AAC5C,IAAK,IAAA,CAAA,SAAA,CAAU,IAAI,MAAM,CAAA;AAAA;AAC3B,EAEA,oBAAoB,GAAoC,EAAA;AACtD,IAAA,IAAA,CAAK,cAAe,CAAA,GAAA,CAAI,GAAK,EAAA,IAAA,CAAK,UAAU,CAAA;AAC5C,IAAK,IAAA,CAAA,SAAA,CAAU,IAAI,MAAM,CAAA;AAAA;AAC3B,EAEA,eAAe,GAAkC,EAAA;AAC/C,IAAK,IAAA,CAAA,WAAA,CAAY,IAAI,MAAM,CAAA;AAC3B,IAAA,IAAA,CAAK,kBAAkB,GAAG,CAAA;AAAA;AAC5B,EAEA,gBAAgB,GAAmC,EAAA;AACjD,IAAK,IAAA,CAAA,WAAA,CAAY,IAAI,MAAM,CAAA;AAC3B,IAAA,IAAA,CAAK,mBAAmB,GAAG,CAAA;AAAA;AAC7B,EAEA,eAAe,GAAkC,EAAA;AAC/C,IAAK,IAAA,CAAA,WAAA,CAAY,IAAI,MAAM,CAAA;AAC3B,IAAA,IAAA,CAAK,kBAAkB,GAAG,CAAA;AAAA;AAC5B,EAEA,iBAAiB,GAAoC,EAAA;AACnD,IAAK,IAAA,CAAA,WAAA,CAAY,IAAI,MAAM,CAAA;AAC3B,IAAA,IAAA,CAAK,oBAAoB,GAAG,CAAA;AAAA;AAC9B,EAEA,iBAAiB,GAAoC,EAAA;AACnD,IAAK,IAAA,CAAA,WAAA,CAAY,IAAI,MAAM,CAAA;AAC3B,IAAA,IAAA,CAAK,oBAAoB,GAAG,CAAA;AAAA;AAC9B,EAEA,iBAAiB,KAAqB,EAAA;AACpC,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,kBAAmB,CAAA,KAAA,CAAM,MAAM,CAAA;AAEjD,IAAA,KAAA,IAAS,CAAI,GAAA,KAAA,CAAM,MAAQ,EAAA,CAAA,EAAA,GAAM,CAAK,IAAA;AACpC,MAAA,IAAA,CAAK,CAAC,CAAA,GAAI,KAAM,CAAA,UAAA,CAAW,CAAC,CAAA;AAAA;AAC9B;AACF,EAEA,gBAAgB,KAAqB,EAAA;AACnC,IAAM,MAAA,OAAA,GAAU,IAAI,WAAY,EAAA;AAChC,IAAM,MAAA,IAAA,GAAO,OAAQ,CAAA,MAAA,CAAO,KAAK,CAAA;AAEjC,IAAA,IAAA,CAAK,eAAe,IAAI,CAAA;AAAA;AAE5B,CAAA;AAEO,IAAM,MAAA,GAAN,cAAqB,OAAQ,CAAA;AAAA,EAClC,SAAoB,GAAA;AAClB,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,SAAS,CAAA;AAE/C,IAAA,IAAA,CAAK,SAAS,CAAC,CAAA;AAEf,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,UAAqB,GAAA;AACnB,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,aAAc,CAAA,IAAA,CAAK,UAAU,CAAA;AAEjD,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,SAAoB,GAAA;AAClB,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,YAAa,CAAA,IAAA,CAAK,UAAU,CAAA;AAEhD,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,WAAsB,GAAA;AACpB,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,UAAU,CAAA;AAElD,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,WAAsB,GAAA;AACpB,IAAA,MAAM,MAAS,GAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,UAAU,CAAA;AAElD,IAAA,IAAA,CAAK,UAAU,CAAC,CAAA;AAEhB,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,kBAAkB,MAA4B,EAAA;AAC5C,IAAM,MAAA,KAAA,GAAQ,KAAK,OAAQ,EAAA;AAC3B,IAAA,MAAM,OAAO,IAAK,CAAA,YAAA,CAAa,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAE7D,IAAA,IAAA,CAAK,SAAS,MAAM,CAAA;AAEpB,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,mBAAmB,MAA6B,EAAA;AAC9C,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAC5B,IAAA,MAAM,OAAO,IAAK,CAAA,aAAA,CAAc,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAE9D,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,kBAAkB,MAA4B,EAAA;AAC5C,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAC5B,IAAA,MAAM,OAAO,IAAK,CAAA,YAAA,CAAa,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAE7D,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,oBAAoB,MAA8B,EAAA;AAChD,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAC5B,IAAA,MAAM,OAAO,IAAK,CAAA,cAAA,CAAe,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAE/D,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,oBAAoB,MAA8B,EAAA;AAChD,IAAM,MAAA,KAAA,GAAQ,KAAK,QAAS,EAAA;AAC5B,IAAA,MAAM,OAAO,IAAK,CAAA,cAAA,CAAe,QAAS,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAE/D,IAAA,IAAA,CAAK,UAAU,MAAM,CAAA;AAErB,IAAO,OAAA,IAAA;AAAA;AACT,EAEA,cAA6B,GAAA;AAC3B,IAAM,MAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAE/B,IAAO,OAAA,IAAA,CAAK,kBAAkB,MAAM,CAAA;AAAA;AACtC,EAEA,eAA+B,GAAA;AAC7B,IAAM,MAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAE/B,IAAO,OAAA,IAAA,CAAK,mBAAmB,MAAM,CAAA;AAAA;AACvC,EAEA,cAA6B,GAAA;AAC3B,IAAM,MAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAE/B,IAAO,OAAA,IAAA,CAAK,kBAAkB,MAAM,CAAA;AAAA;AACtC,EAEA,gBAAiC,GAAA;AAC/B,IAAM,MAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAE/B,IAAO,OAAA,IAAA,CAAK,oBAAoB,MAAM,CAAA;AAAA;AACxC,EAEA,gBAAiC,GAAA;AAC/B,IAAM,MAAA,MAAA,GAAS,KAAK,UAAW,EAAA;AAE/B,IAAO,OAAA,IAAA,CAAK,oBAAoB,MAAM,CAAA;AAAA;AACxC,EAEA,gBAAgB,KAA6B,EAAA;AAC3C,IAAM,MAAA,MAAA,GAAS,IAAI,KAAA,CAAkB,KAAK,CAAA;AAE1C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAO,MAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,cAAe,EAAA;AAAA;AAGlC,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,iBAAiB,KAA8B,EAAA;AAC7C,IAAM,MAAA,MAAA,GAAS,IAAI,KAAA,CAAmB,KAAK,CAAA;AAE3C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAO,MAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAGnC,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,gBAAgB,KAA6B,EAAA;AAC3C,IAAM,MAAA,MAAA,GAAS,IAAI,KAAA,CAAkB,KAAK,CAAA;AAE1C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAO,MAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,cAAe,EAAA;AAAA;AAGlC,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,kBAAkB,KAA+B,EAAA;AAC/C,IAAM,MAAA,MAAA,GAAS,IAAI,KAAA,CAAoB,KAAK,CAAA;AAE5C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAO,MAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,gBAAiB,EAAA;AAAA;AAGpC,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,kBAAkB,KAA+B,EAAA;AAC/C,IAAM,MAAA,MAAA,GAAS,IAAI,KAAA,CAAoB,KAAK,CAAA;AAE5C,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAO,MAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,gBAAiB,EAAA;AAAA;AAGpC,IAAO,OAAA,MAAA;AAAA;AACT,EAEA,eAA0B,GAAA;AACxB,IAAM,MAAA,IAAA,GAAO,KAAK,cAAe,EAAA;AAEjC,IAAO,OAAA,MAAA,CAAO,YAAa,CAAA,GAAG,IAAI,CAAA;AAAA;AACpC,EAEA,iBAAiB,KAAyB,EAAA;AACxC,IAAM,MAAA,OAAA,GAAU,IAAI,KAAA,CAAc,KAAK,CAAA;AAEvC,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAQ,OAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,eAAgB,EAAA;AAAA;AAGpC,IAAO,OAAA,OAAA;AAAA;AACT,EAEA,cAAyB,GAAA;AACvB,IAAM,MAAA,IAAA,GAAO,KAAK,cAAe,EAAA;AACjC,IAAM,MAAA,OAAA,GAAU,IAAI,WAAY,EAAA;AAEhC,IAAO,OAAA,OAAA,CAAQ,OAAO,IAAI,CAAA;AAAA;AAC5B,EAEA,gBAAgB,KAAyB,EAAA;AACvC,IAAM,MAAA,OAAA,GAAU,IAAI,KAAA,CAAc,KAAK,CAAA;AAEvC,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,KAAA,EAAO,CAAK,EAAA,EAAA;AAC9B,MAAQ,OAAA,CAAA,CAAC,CAAI,GAAA,IAAA,CAAK,cAAe,EAAA;AAAA;AAGnC,IAAO,OAAA,OAAA;AAAA;AAEX,CAAA;;;ACtdO,IAAM,YAAe,GAAA,IAAA;AACrB,IAAM,cAAiB,GAAA,GAAA;AAEvB,IAAM,qBAAwB,GAAA,EAAA;;;ACkCrC,eAAsB,cAAA,CACpB,YACA,OACsB,EAAA;AACtB,EAAM,MAAA,EAAE,gBAAkB,EAAA,iBAAA,EAAmB,kBAAqB,GAAA,qBAAA,EAAuB,GAAM,GAAA,OAAA,CAAQ,GAAI,CAAA,IAAA,CAAK,OAAO,CAAA,EAAM,GAAA,OAAA;AAC7H,EAAA,MAAM,SAAS,IAAI,WAAA,CAAY,OAAO,EAAE,OAAA,EAAS,oBAAoB,CAAA;AAErE,EAAA,MAAM,OAAU,GAAA;AAAA,IACd,GAAK,EAAA;AAAA,MACH,MAAA;AAAA,MACA,SAAS,MAAM;AACb,QAAQ,OAAA,EAAA;AAAA;AACV;AACF,GACF;AAEA,EAAA,MAAM,EAAE,QAAS,EAAA,GAAI,MAAM,WAAY,CAAA,WAAA,CAAY,YAAY,OAAO,CAAA;AAEtE,EAAA,MAAM,UAAU,QAAS,CAAA,OAAA;AAEzB,EAAM,MAAA,UAAA,GAAa,CAAI,UAAsD,KAAA;AAC3E,IAAI,IAAA,MAAA;AACJ,IAAIA,IAAAA,SAAAA;AAEJ,IAAA,OAAO,MAAM;AACX,MAAA,IAAIA,SAAa,KAAA,MAAA,IAAa,MAAO,CAAA,MAAA,KAAW,MAAQ,EAAA;AACtD,QAAA,MAAA,GAAS,MAAO,CAAA,MAAA;AAChB,QAAAA,SAAAA,GAAW,WAAW,MAAM,CAAA;AAAA;AAG9B,MAAOA,OAAAA,SAAAA;AAAA,KACT;AAAA,GACF;AAEA,EAAM,MAAA,MAAA,GAAS,QAAQ,SAAU,EAAA;AACjC,EAAM,MAAA,MAAA,GAAS,QAAQ,WAAY,EAAA;AACnC,EAAM,MAAA,QAAA,GAAW,OAAQ,CAAA,oBAAA,CAAqB,gBAAgB,CAAA;AAC9D,EAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,qBAAA,CAAsB,iBAAiB,CAAA;AAEjE,EAAA,MAAM,WAAW,UAAW,CAAA,CAAA,MAAA,KAAU,IAAI,iBAAA,CAAkB,MAAM,CAAC,CAAA;AACnE,EAAM,MAAA,UAAA,GAAa,WAAW,CAAU,MAAA,KAAA,IAAI,kBAAkB,MAAQ,EAAA,MAAA,EAAQ,YAAY,CAAC,CAAA;AAC3F,EAAM,MAAA,YAAA,GAAe,WAAW,CAAU,MAAA,KAAA,IAAI,kBAAkB,MAAQ,EAAA,MAAA,EAAQ,cAAc,CAAC,CAAA;AAC/F,EAAM,MAAA,eAAA,GAAkB,WAAW,CAAU,MAAA,KAAA,IAAI,OAAO,MAAQ,EAAA,QAAA,EAAU,gBAAgB,CAAC,CAAA;AAC3F,EAAM,MAAA,gBAAA,GAAmB,WAAW,CAAU,MAAA,KAAA,IAAI,OAAO,MAAQ,EAAA,SAAA,EAAW,iBAAiB,CAAC,CAAA;AAE9F,EAAA,MAAM,UAAU,MAAY;AAC1B,IAAA,MAAM,OAAO,UAAW,EAAA;AACxB,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAA;AAC7B,IAAM,MAAA,OAAA,GAAU,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,GAAG,MAAM,CAAC,CAAE,CAAA,QAAA,CAAS,MAAM,CAAA;AAErE,IAAA,GAAA,CAAI,OAAO,CAAA;AAAA,GACb;AAEA,EAAM,MAAA,cAAA,GAAiB,CAAC,CAAoB,KAAA;AAC1C,IAAA,MAAM,OAAO,YAAa,EAAA;AAC1B,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,OAAA,CAAQ,CAAC,CAAA;AAE7B,IAAA,IAAI,SAAS,CAAG,EAAA;AACd,MAAM,MAAA,OAAA,GAAU,MAAO,CAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,GAAG,MAAM,CAAC,CAAE,CAAA,QAAA,CAAS,MAAM,CAAA;AAErE,MAAA,MAAM,MAAM,OAAO,CAAA;AAAA,KACrB,MAAA,IAAW,MAAM,MAAW,EAAA;AAC1B,MAAM,MAAA,CAAA;AAAA,KACD,MAAA;AACL,MAAA,MAAM,MAAM,eAAe,CAAA;AAAA;AAC7B,GACF;AAEA,EAAM,MAAA,WAAA,GAAc,CAAC,IAA6B,KAAA;AAChD,IAAI,IAAA,MAAA;AAEJ,IAAI,IAAA;AACF,MAAA,MAAA,GAAS,IAAK,EAAA;AAAA,aACP,CAAG,EAAA;AACV,MAAA,cAAA,CAAe,CAAU,CAAA;AAAA;AAG3B,IAAA,IAAI,WAAW,CAAG,EAAA;AAChB,MAAe,cAAA,EAAA;AAAA;AACjB,GACF;AAEA,EAAA,MAAM,WAAW,MAAc;AAC7B,IAAA,MAAM,QAAQ,eAAgB,EAAA;AAE9B,IAAA,KAAA,CAAM,KAAM,EAAA;AAEZ,IAAO,OAAA,KAAA;AAAA,GACT;AAEA,EAAA,MAAM,YAAY,MAAc;AAC9B,IAAA,MAAM,QAAQ,gBAAiB,EAAA;AAE/B,IAAA,KAAA,CAAM,KAAM,EAAA;AAEZ,IAAO,OAAA,KAAA;AAAA,GACT;AAEA,EAAA,MAAM,OACJ,CAAyB,IAAA,EAAsB,WAA+C,EAAA,YAAA,KAC9F,IAAI,IAAe,KAAA;AACjB,IAAA,MAAM,QAAQ,QAAS,EAAA;AAEvB,IAAA,WAAA,CAAY,OAAO,IAAI,CAAA;AAEvB,IAAA,WAAA,CAAY,IAAI,CAAA;AAEhB,IAAO,OAAA,YAAA,CAAa,WAAW,CAAA;AAAA,GACjC;AAEF,EAAO,OAAA;AAAA,IACL,OAAA;AAAA,IACA,SAAA,EAAW,MAAM,MAAO,CAAA,MAAA;AAAA,IACxB,OAAA,EAAS,MAAM,MAAA,CAAO,MAAO,CAAA,UAAA;AAAA,IAC7B,UAAA;AAAA,IACA,QAAA;AAAA,IACA,QAAA;AAAA,IACA,SAAA;AAAA,IACA,WAAA;AAAA,IACA;AAAA,GACF;AACF","file":"index.mjs","sourcesContent":["import assert from 'assert'\n\nfunction alignUp(x: number, bytes: 4 | 8): number {\n  const mask = bytes - 1\n\n  return (x + mask) & ~mask\n}\n\nclass Channel {\n  private offset = 0\n  storageUint8: Uint8Array\n  storageUint32: Uint32Array\n  storageInt32: Int32Array\n  storageFloat32: Float32Array\n  storageFloat64: Float64Array\n\n  constructor(buffer: ArrayBuffer, offset = 0, sizeInBytes = buffer.byteLength) {\n    this.storageUint8 = new Uint8Array(buffer, offset, sizeInBytes / Uint8Array.BYTES_PER_ELEMENT)\n    this.storageUint32 = new Uint32Array(buffer, offset, sizeInBytes / Uint32Array.BYTES_PER_ELEMENT)\n    this.storageInt32 = new Int32Array(buffer, offset, sizeInBytes / Int32Array.BYTES_PER_ELEMENT)\n    this.storageFloat32 = new Float32Array(buffer, offset, sizeInBytes / Float32Array.BYTES_PER_ELEMENT)\n    this.storageFloat64 = new Float64Array(buffer, offset, sizeInBytes / Float64Array.BYTES_PER_ELEMENT)\n  }\n\n  reset(): void {\n    this.offset = 0\n  }\n\n  offset8(): number {\n    return this.offset\n  }\n\n  offset32(): number {\n    // align to 4 bytes\n    this.offset = alignUp(this.offset, 4)\n\n    // divide by 4\n    return this.offset >>> 2\n  }\n\n  offset64(): number {\n    // align to 8 bytes\n    this.offset = alignUp(this.offset, 8)\n\n    // divide by 8\n    return this.offset >>> 3\n  }\n\n  advance8(count: number): void {\n    this.offset += count\n\n    if (this.offset > this.storageUint8.length) {\n      throw Error('Reached end of channel')\n    }\n  }\n\n  advance32(count: number): void {\n    this.advance8(count * 4)\n  }\n\n  advance64(count: number): void {\n    this.advance8(count * 8)\n  }\n}\n\nexport class Writer extends Channel {\n  writeUint8(value: number): void {\n    this.storageUint8[this.offset8()] = value\n    this.advance8(1)\n  }\n\n  writeUint32(value: number): void {\n    this.storageUint32[this.offset32()] = value\n    this.advance32(1)\n  }\n\n  writeInt32(value: number): void {\n    this.storageInt32[this.offset32()] = value\n    this.advance32(1)\n  }\n\n  writeFloat32(value: number): void {\n    this.storageFloat32[this.offset32()] = value\n    this.advance32(1)\n  }\n\n  writeFloat64(value: number): void {\n    this.storageFloat64[this.offset64()] = value\n    this.advance64(1)\n  }\n\n  allocateUint8(): (value: number) => void {\n    const offset = this.offset8()\n\n    this.advance8(1)\n\n    return value => {\n      this.storageUint8[offset] = value\n    }\n  }\n\n  allocateUint32(): (value: number) => void {\n    const offset = this.offset32()\n\n    this.advance32(1)\n\n    return value => {\n      this.storageUint32[offset] = value\n    }\n  }\n\n  allocateInt32(): (value: number) => void {\n    const offset = this.offset32()\n\n    this.advance32(1)\n\n    return value => {\n      this.storageInt32[offset] = value\n    }\n  }\n\n  allocateFloat32(): (value: number) => void {\n    const offset = this.offset32()\n\n    this.advance32(1)\n\n    return value => {\n      this.storageFloat32[offset] = value\n    }\n  }\n\n  allocateFloat64(): (value: number) => void {\n    const offset = this.offset64()\n\n    this.advance64(1)\n\n    return value => {\n      this.storageFloat64[offset] = value\n    }\n  }\n\n  allocateUint8Elements(length: number): Uint8Array {\n    const start = this.offset8()\n\n    this.advance8(length)\n\n    return this.storageUint8.subarray(start, start + length)\n  }\n\n  allocateUint8Array(length: number): Uint8Array {\n    this.writeUint32(length)\n    return this.allocateUint8Elements(length)\n  }\n\n  allocateUint32Elements(length: number): Uint32Array {\n    const start = this.offset32()\n\n    this.advance32(length)\n\n    return this.storageUint32.subarray(start, start + length)\n  }\n\n  allocateUint32Array(length: number): Uint32Array {\n    this.writeUint32(length)\n    return this.allocateUint32Elements(length)\n  }\n\n  allocateInt32Elements(length: number): Int32Array {\n    const start = this.offset32()\n\n    this.advance32(length)\n\n    return this.storageInt32.subarray(start, start + length)\n  }\n\n  allocateInt32Array(length: number): Int32Array {\n    this.writeUint32(length)\n    return this.allocateInt32Elements(length)\n  }\n\n  allocateFloat32Elements(length: number): Float32Array {\n    const start = this.offset32()\n\n    this.advance32(length)\n\n    return this.storageFloat32.subarray(start, start + length)\n  }\n\n  allocateFloat32Array(length: number): Float32Array {\n    this.writeUint32(length)\n    return this.allocateFloat32Elements(length)\n  }\n\n  allocateFloat64Elements(length: number): Float64Array {\n    const start = this.offset64()\n\n    this.advance64(length)\n\n    return this.storageFloat64.subarray(start, start + length)\n  }\n\n  allocateFloat64Array(length: number): Float64Array {\n    this.writeUint32(length)\n    return this.allocateFloat64Elements(length)\n  }\n\n  copyUint8Elements(arr: Uint8Array | number[]): void {\n    this.storageUint8.set(arr, this.offset8())\n    this.advance8(arr.length)\n  }\n\n  copyUint32Elements(arr: Uint32Array | number[]): void {\n    this.storageUint32.set(arr, this.offset32())\n    this.advance32(arr.length)\n  }\n\n  copyInt32Elements(arr: Int32Array | number[]): void {\n    this.storageInt32.set(arr, this.offset32())\n    this.advance32(arr.length)\n  }\n\n  copyFloat32Elements(arr: Float32Array | number[]): void {\n    this.storageFloat32.set(arr, this.offset32())\n    this.advance32(arr.length)\n  }\n\n  copyFloat64Elements(arr: Float64Array | number[]): void {\n    this.storageFloat64.set(arr, this.offset64())\n    this.advance64(arr.length)\n  }\n\n  copyUint8Array(arr: Uint8Array | number[]): void {\n    this.writeUint32(arr.length)\n    this.copyUint8Elements(arr)\n  }\n\n  copyUint32Array(arr: Uint32Array | number[]): void {\n    this.writeUint32(arr.length)\n    this.copyUint32Elements(arr)\n  }\n\n  copyInt32Array(arr: Int32Array | number[]): void {\n    this.writeUint32(arr.length)\n    this.copyInt32Elements(arr)\n  }\n\n  copyFloat32Array(arr: Float32Array | number[]): void {\n    this.writeUint32(arr.length)\n    this.copyFloat32Elements(arr)\n  }\n\n  copyFloat64Array(arr: Float64Array | number[]): void {\n    this.writeUint32(arr.length)\n    this.copyFloat64Elements(arr)\n  }\n\n  writeAsciiString(value: string): void {\n    const data = this.allocateUint8Array(value.length)\n\n    for (let i = value.length; i-- > 0; ) {\n      data[i] = value.charCodeAt(i)\n    }\n  }\n\n  writeUtf8String(value: string): void {\n    const encoder = new TextEncoder()\n    const data = encoder.encode(value)\n\n    this.copyUint8Array(data)\n  }\n}\n\nexport class Reader extends Channel {\n  readUint8(): number {\n    const result = this.storageUint8[this.offset8()]\n\n    this.advance8(1)\n\n    return result\n  }\n\n  readUint32(): number {\n    const result = this.storageUint32[this.offset32()]\n\n    this.advance32(1)\n\n    return result\n  }\n\n  readInt32(): number {\n    const result = this.storageInt32[this.offset32()]\n\n    this.advance32(1)\n\n    return result\n  }\n\n  readFloat32(): number {\n    const result = this.storageFloat32[this.offset32()]\n\n    this.advance32(1)\n\n    return result\n  }\n\n  readFloat64(): number {\n    const result = this.storageFloat64[this.offset64()]\n\n    this.advance64(1)\n\n    return result\n  }\n\n  readUint8Elements(length: number): Uint8Array {\n    const start = this.offset8()\n    const view = this.storageUint8.subarray(start, start + length)\n\n    this.advance8(length)\n\n    return view\n  }\n\n  readUint32Elements(length: number): Uint32Array {\n    const start = this.offset32()\n    const view = this.storageUint32.subarray(start, start + length)\n\n    this.advance32(length)\n\n    return view\n  }\n\n  readInt32Elements(length: number): Int32Array {\n    const start = this.offset32()\n    const view = this.storageInt32.subarray(start, start + length)\n\n    this.advance32(length)\n\n    return view\n  }\n\n  readFloat32Elements(length: number): Float32Array {\n    const start = this.offset32()\n    const view = this.storageFloat32.subarray(start, start + length)\n\n    this.advance32(length)\n\n    return view\n  }\n\n  readFloat64Elements(length: number): Float64Array {\n    const start = this.offset64()\n    const view = this.storageFloat64.subarray(start, start + length)\n\n    this.advance64(length)\n\n    return view\n  }\n\n  readUint8Array(): Uint8Array {\n    const length = this.readUint32()\n\n    return this.readUint8Elements(length)\n  }\n\n  readUint32Array(): Uint32Array {\n    const length = this.readUint32()\n\n    return this.readUint32Elements(length)\n  }\n\n  readInt32Array(): Int32Array {\n    const length = this.readUint32()\n\n    return this.readInt32Elements(length)\n  }\n\n  readFloat32Array(): Float32Array {\n    const length = this.readUint32()\n\n    return this.readFloat32Elements(length)\n  }\n\n  readFloat64Array(): Float64Array {\n    const length = this.readUint32()\n\n    return this.readFloat64Elements(length)\n  }\n\n  readUint8Arrays(count: number): Uint8Array[] {\n    const result = new Array<Uint8Array>(count)\n\n    for (let i = 0; i < count; i++) {\n      result[i] = this.readUint8Array()\n    }\n\n    return result\n  }\n\n  readUint32Arrays(count: number): Uint32Array[] {\n    const result = new Array<Uint32Array>(count)\n\n    for (let i = 0; i < count; i++) {\n      result[i] = this.readUint32Array()\n    }\n\n    return result\n  }\n\n  readInt32Arrays(count: number): Int32Array[] {\n    const result = new Array<Int32Array>(count)\n\n    for (let i = 0; i < count; i++) {\n      result[i] = this.readInt32Array()\n    }\n\n    return result\n  }\n\n  readFloat32Arrays(count: number): Float32Array[] {\n    const result = new Array<Float32Array>(count)\n\n    for (let i = 0; i < count; i++) {\n      result[i] = this.readFloat32Array()\n    }\n\n    return result\n  }\n\n  readFloat64Arrays(count: number): Float64Array[] {\n    const result = new Array<Float64Array>(count)\n\n    for (let i = 0; i < count; i++) {\n      result[i] = this.readFloat64Array()\n    }\n\n    return result\n  }\n\n  readAsciiString(): string {\n    const data = this.readUint8Array()\n\n    return String.fromCharCode(...data)\n  }\n\n  readAsciiStrings(count: number): string[] {\n    const results = new Array<string>(count)\n\n    for (let i = 0; i < count; i++) {\n      results[i] = this.readAsciiString()\n    }\n\n    return results\n  }\n\n  readUtf8String(): string {\n    const data = this.readUint8Array()\n    const decoder = new TextDecoder()\n\n    return decoder.decode(data)\n  }\n\n  readUtf8Strings(count: number): string[] {\n    const results = new Array<string>(count)\n\n    for (let i = 0; i < count; i++) {\n      results[i] = this.readUtf8String()\n    }\n\n    return results\n  }\n}\n","export const MAX_LOG_SIZE = 1024\nexport const MAX_ERROR_SIZE = 256\nexport const PAGE_SIZE = 65536\nexport const DEFAULT_INITIAL_PAGES = 17\n","import { Reader, Writer } from './conduit'\nimport { DEFAULT_INITIAL_PAGES, MAX_ERROR_SIZE, MAX_LOG_SIZE, PAGE_SIZE } from './constants'\n\nexport type BindableExport = () => 0 | 1\n\nexport type InstanceOptions = {\n  inputChannelSize: number\n  outputChannelSize: number\n  initialMemoryPages?: number\n  log?: (message: string) => void\n}\n\nexport type ExportBase = Record<string, () => number> & {\n  getLogPtr: () => number\n  getErrorPtr: () => number\n  allocateInputChannel: (sizeInBytes: number) => number\n  allocateOutputChannel: (sizeInBytes: number) => number\n}\n\nexport type BindingFactory = <Args extends unknown[], Result>(\n  func: BindableExport,\n  handleInput: (input: Writer, args: Args) => void,\n  handleOutput: (output: Reader) => Result,\n) => (...args: Args) => Result\n\nexport type Instance<T extends Record<string, unknown>> = {\n  getMemory: () => ArrayBuffer\n  getBytes: () => Uint8ClampedArray\n  exports: ExportBase & T\n  createView: <T>(init: (buffer: ArrayBuffer) => T) => () => T\n  getInput: () => Writer\n  getOutput: () => Reader\n  handleError: (func: () => number) => void\n  getSize: () => number\n  bind: BindingFactory\n}\n\nexport async function createInstance<T extends Record<string, BindableExport>>(\n  wasmBuffer: Buffer,\n  options: InstanceOptions,\n): Promise<Instance<T>> {\n  const { inputChannelSize, outputChannelSize, initialMemoryPages = DEFAULT_INITIAL_PAGES, log = console.log.bind(console) } = options\n  const memory = new WebAssembly.Memory({ initial: initialMemoryPages })\n\n  const imports = {\n    env: {\n      memory,\n      hostLog: () => {\n        hostLog() // has to be hoisted\n      },\n    },\n  }\n\n  const { instance } = await WebAssembly.instantiate(wasmBuffer, imports)\n\n  const exports = instance.exports as ExportBase & T\n\n  const createView = <T>(createFunc: (buffer: ArrayBuffer) => T): (() => T) => {\n    let buffer: ArrayBuffer\n    let instance: T\n\n    return () => {\n      if (instance === undefined || memory.buffer !== buffer) {\n        buffer = memory.buffer\n        instance = createFunc(buffer)\n      }\n\n      return instance\n    }\n  }\n\n  const logPtr = exports.getLogPtr()\n  const errPtr = exports.getErrorPtr()\n  const inputPtr = exports.allocateInputChannel(inputChannelSize)\n  const outputPtr = exports.allocateOutputChannel(outputChannelSize)\n\n  const getBytes = createView(buffer => new Uint8ClampedArray(buffer))\n  const getLogData = createView(buffer => new Uint8ClampedArray(buffer, logPtr, MAX_LOG_SIZE))\n  const getErrorData = createView(buffer => new Uint8ClampedArray(buffer, errPtr, MAX_ERROR_SIZE))\n  const getInputChannel = createView(buffer => new Writer(buffer, inputPtr, inputChannelSize))\n  const getOutputChannel = createView(buffer => new Reader(buffer, outputPtr, outputChannelSize))\n\n  const hostLog = (): void => {\n    const data = getLogData()\n    const length = data.indexOf(0)\n    const message = Buffer.from(data.subarray(0, length)).toString('utf8')\n\n    log(message)\n  }\n\n  const throwWasmError = (e?: Error): void => {\n    const data = getErrorData()\n    const length = data.indexOf(0)\n\n    if (length > 0) {\n      const message = Buffer.from(data.subarray(0, length)).toString('utf8')\n\n      throw Error(message)\n    } else if (e !== undefined) {\n      throw e\n    } else {\n      throw Error('Unknown error')\n    }\n  }\n\n  const handleError = (func: () => number): void => {\n    let result\n\n    try {\n      result = func()\n    } catch (e) {\n      throwWasmError(e as Error)\n    }\n\n    if (result !== 0) {\n      throwWasmError()\n    }\n  }\n\n  const getInput = (): Writer => {\n    const input = getInputChannel()\n\n    input.reset()\n\n    return input\n  }\n\n  const getOutput = (): Reader => {\n    const input = getOutputChannel()\n\n    input.reset()\n\n    return input\n  }\n\n  const bind: BindingFactory =\n    <T extends unknown[], R>(func: BindableExport, handleInput: (input: Writer, args: T) => void, handleOutput: (output: Reader) => R) =>\n    (...args: T): R => {\n      const input = getInput()\n\n      handleInput(input, args)\n\n      handleError(func)\n\n      return handleOutput(getOutput())\n    }\n\n  return {\n    exports,\n    getMemory: () => memory.buffer,\n    getSize: () => memory.buffer.byteLength,\n    createView,\n    getBytes,\n    getInput,\n    getOutput,\n    handleError,\n    bind,\n  }\n}\n"]}